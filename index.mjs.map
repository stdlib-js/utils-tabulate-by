{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport isFunction from '@stdlib/assert-is-function';\nimport indexOf from '@stdlib/utils-index-of';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Generates a frequency table according to a provided function.\n*\n* ## Notes\n*\n* -   The output is an array of arrays. Each sub-array corresponds to a unique value in the input collection and is structured as follows:\n*\n*     -   0: unique value\n*     -   1: value count\n*     -   2: frequency percentage\n*\n* @param {Collection} collection - input collection\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {Function} indicator - function whose return values are used to populate the output frequency table\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} last argument must be a function\n* @throws {TypeError} must provide valid options\n* @returns {(Array<Array>|Array)} frequency table\n*\n* @example\n* function indicator( value ) {\n*     return value[ 0 ];\n* }\n*\n* var arr = [ 'beep', 'boop', 'foo', 'beep' ];\n*\n* var out = tabulateBy( arr, indicator );\n* // returns [ [ 'b', 3, 0.75 ], [ 'f', 1, 0.25 ] ]\n*/\nfunction tabulateBy( collection, options, indicator ) {\n\tvar thisArg;\n\tvar count;\n\tvar opts;\n\tvar tmp;\n\tvar len;\n\tvar out;\n\tvar err;\n\tvar cb;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( format( '1XjAh', collection ) );\n\t}\n\topts = {};\n\tif ( arguments.length === 2 ) {\n\t\tcb = options;\n\t} else {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tcb = indicator;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( '1Xj3q', cb ) );\n\t}\n\tthisArg = opts.thisArg;\n\tcount = 0;\n\ttmp = [];\n\tout = [];\n\n\t// For each collection element, determine if we've seen the element before. If not, cache a reference which points to its location in the output array; otherwise, update the running count.\n\tlen = collection.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = cb.call( thisArg, collection[ i ], i );\n\t\tcount += 1;\n\t\tj = indexOf( tmp, v );\n\t\tif ( j === -1 ) {\n\t\t\ttmp.push( v );\n\t\t\tout.push( [ v, 1, 0 ] );\n\t\t} else {\n\t\t\tout[ j ][ 1 ] += 1;\n\t\t}\n\t}\n\t// Compute percentages...\n\tlen = out.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ][ 2 ] = out[ i ][ 1 ] / count;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default tabulateBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.thisArg] - execution context\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'thisArg': {}\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '1Xj2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'thisArg' ) ) {\n\t\topts.thisArg = options.thisArg;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["tabulateBy","collection","options","indicator","thisArg","count","opts","tmp","len","out","err","cb","v","i","j","isCollection","TypeError","format","arguments","length","isObject","hasOwnProp","validate","isFunction","call","indexOf","push"],"mappings":";;yjBA8DA,SAASA,EAAYC,EAAYC,EAASC,GACzC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAcd,GACnB,MAAM,IAAIe,UAAWC,EAAQ,QAAShB,IAGvC,GADAK,EAAO,CAAA,EACmB,IAArBY,UAAUC,OACdR,EAAKT,MACC,CAEN,GADAQ,ECjCF,SAAmBJ,EAAMJ,GACxB,OAAMkB,EAAUlB,IAGXmB,EAAYnB,EAAS,aACzBI,EAAKF,QAAUF,EAAQE,SAEjB,MALC,IAAIY,UAAWC,EAAQ,QAASf,GAMzC,CDyBQoB,CAAUhB,EAAMJ,GACjBQ,EACJ,MAAMA,EAEPC,EAAKR,CACL,CACD,IAAMoB,EAAYZ,GACjB,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IASvC,IAPAP,EAAUE,EAAKF,QACfC,EAAQ,EACRE,EAAM,GACNE,EAAM,GAGND,EAAMP,EAAWkB,OACXN,EAAI,EAAGA,EAAIL,EAAKK,IACrBD,EAAID,EAAGa,KAAMpB,EAASH,EAAYY,GAAKA,GACvCR,GAAS,GAEG,KADZS,EAAIW,EAASlB,EAAKK,KAEjBL,EAAImB,KAAMd,GACVH,EAAIiB,KAAM,CAAEd,EAAG,EAAG,KAElBH,EAAKK,GAAK,IAAO,EAKnB,IADAN,EAAMC,EAAIU,OACJN,EAAI,EAAGA,EAAIL,EAAKK,IACrBJ,EAAKI,GAAK,GAAMJ,EAAKI,GAAK,GAAMR,EAEjC,OAAOI,CACR"}